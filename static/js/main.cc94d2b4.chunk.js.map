{"version":3,"sources":["gitsearch/reducer.js","gitsearch/api.js","gitsearch/actions.js","components/Search.js","components/nav/Nav.js","components/button/Button.js","components/WithLoader.js","components/searchresultscontainer/SearchResultsContainer.js","components/avatar/Avatar.js","gitsearch/GitSearch.js","gitsearch/OrgnisationSearch.js","gitsearch/RepoSearch.js","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["initialState","processingStatus","searchTerm","selectedOption","data","BASE_URL","getRepos","username","a","url","axios","get","repos","status","Error","getUserData","all","userData","orgs","init","dispatch","type","setSelectedOption","getState","console","log","payload","setUserData","then","catch","setRepos","connect","state","searchReducer","bindActionCreators","setSearching","setData","props","placeHolder","className","onChange","e","target","value","Nav","to","data-testid","onClick","title","WithLoader","Component","height","width","color","compose","isDataEmpty","length","dataProcessed","autoHide","autoHeight","autoHeightMin","map","val","name","login","description","src","AvatarDescription","AppRouter","path","component","OrganisationSearch","RepoSearch","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middleware","thunk","reducers","store","createStore","combineReducers","applyMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc94d2b4.chunk.js","sourcesContent":["\r\nconst initialState = {\r\n  processingStatus: 'NOT_PROCESSED',\r\n  searchTerm:'',\r\n  selectedOption:'Search Repos',\r\n  data:[]\r\n};\r\n\r\nexport default (state = initialState, { payload, type }) => {\r\n  switch (type) {\r\n    case 'setSearchTerm' :\r\n      return {\r\n        ...state,\r\n        searchTerm: payload\r\n      };\r\n\r\n    case 'processing' :\r\n      return {\r\n        ...state,\r\n        processingStatus: 'PROCESSING'\r\n      };\r\n      \r\n    case 'processingError' :\r\n    return {\r\n      ...state,\r\n      processingStatus: 'processingError'\r\n    };\r\n\r\n    case 'SetRepos':\r\n      return {\r\n        ...state,\r\n        data: payload,\r\n        processingStatus: 'PROCESSED'\r\n      };\r\n\r\n    case 'SearchOrganisations':\r\n      return {\r\n        ...state,\r\n        data: payload,\r\n        processingStatus: 'PROCESSED'\r\n      };\r\n      case 'SetSelectedOption':\r\n      return {\r\n        ...state,\r\n        selectedOption: payload,\r\n        processingStatus: 'NOT_PROCESSED',\r\n        data:[]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import axios from 'axios';\r\n\r\nconst BASE_URL = \"https://api.github.com\";\r\n\r\n\r\nconst getRepos = async(username) => {\r\n  const url = `${BASE_URL}/users/${username}/repos?per_page=250`;\r\n   const repos = await axios.get(url);\r\n   const {data} = repos\r\n   if(repos.status === 404 || repos.status === 403 || repos.status === 500) {\r\n     throw Error('processingError')\r\n   }\r\n   return data;\r\n}\r\n\r\n\r\nconst getUserData = async(username) => {\r\n  const userData = await axios\r\n  .all([\r\n    axios.get(`${BASE_URL}/users/${username}`),\r\n    axios.get(`${BASE_URL}/users/${username}/orgs`)\r\n  ])\r\n  if(userData.status === 404 || userData.status === 403 || userData.status === 500) {\r\n    throw Error('processingError')\r\n  }\r\n  const [,{data:orgs}] = userData;\r\n  return orgs\r\n}\r\n\r\n\r\n\r\nexport {\r\n  getRepos,\r\n  getUserData\r\n};","import {getRepos, getUserData} from './api';\r\n\r\nconst init = (dispatch) => {\r\n  dispatch({type:'processing'})\r\n}\r\n\r\n\r\nconst setSearchTerm = searchTerm => (dispatch, getState) => {\r\n  dispatch({type:'setSearchTerm', payload:searchTerm})\r\n}\r\n\r\nconst setSelectedOption = selectedOption => (dispatch, getState) => {\r\n  console.log(selectedOption);\r\n  dispatch({type:'SetSelectedOption', payload:selectedOption})\r\n}\r\n\r\nconst setUserData = (searchTerm) => (dispatch, getState) => {\r\n  init(dispatch);\r\n  const onSuccess = (data) => {\r\n    dispatch({type:'SearchOrganisations', payload:data})\r\n  }\r\n\r\n  const onError= () => {\r\n    dispatch({type:'processingError'})\r\n  }\r\n\r\n  getUserData(searchTerm)\r\n  .then(onSuccess)\r\n  .catch(onError)\r\n  }\r\n\r\n  const setRepos = (searchTerm) => (dispatch, getState) => {\r\n    init(dispatch);\r\n    const onSuccess = (data) => {\r\n      dispatch({type:'SetRepos', payload:data})\r\n    }\r\n  \r\n    const onError= () => {\r\n      dispatch({type:'processingError'})\r\n    }\r\n    \r\n    getRepos(searchTerm)\r\n    .then(onSuccess)\r\n    .catch(onError)\r\n    }\r\n\r\nexport {setSearchTerm, setUserData, setRepos, setSelectedOption};","import React, {useState} from 'react';\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {setSearchTerm, setUserData, setRepos} from '../gitsearch/actions';\r\n\r\n\r\nconst Search = (props) => {\r\n  const handleChange =(e)=>{\r\n    props.setSearching(e.target.value);\r\n  } \r\n  return (\r\n    <>\r\n      <input placeHolder={props.placeHolder} type=\"text\" \r\n       className={props.className} onChange={handleChange}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\nsearchTerm:state.searchReducer.searchTerm\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n  setSearching: (payload) => setSearchTerm(payload),\r\n  setData: (payload) => setUserData(payload),\r\n  setRepos: (payload) => setRepos(payload)\r\n}, dispatch)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n  return (\r\n  <div className=\"Navbar\">\r\n    <Link to =\"/\">RepoSearch</Link>\r\n    <Link to =\"/SearchOrganisations\">SearchOrganisations</Link>\r\n  </div>)\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport {setUserData, setRepos} from '../../gitsearch/actions';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nconst Button = (props) => {\r\n  const searchGit = () => {\r\n    if(props.state.selectedOption === 'Search Repos'){\r\n      props.setRepos(props.state.searchTerm)\r\n      return;\r\n    }\r\n    props.setUserData(props.state.searchTerm)\r\n  }\r\n  return (\r\n  <>\r\n    <button data-testid=\"button\" onClick={searchGit} className = {props.className}>{props.title}</button>\r\n  </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) => (\r\n  {\r\n    state:state.searchReducer\r\n  }\r\n)\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\r\n  {\r\n    setRepos,\r\n    setUserData\r\n  },\r\n  dispatch\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);","import React from 'react';\r\nimport { RingLoader } from 'react-spinners';\r\n\r\nconst WithLoader = Component => props => {\r\n  const processingStatus = props.state.processingStatus;\r\n  if(processingStatus==='PROCESSING') {\r\n    return(\r\n      <div className=\"ResultContainer\">\r\n      {\r\n        <RingLoader height='250' width='250' color='rgb(99, 159, 170)'/>\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n  return(\r\n    <Component {...props}/>\r\n  )\r\n}\r\n\r\n\r\nexport default WithLoader;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './SearchResultsContainer.css';\r\nimport { compose } from 'recompose';\r\nimport WithLoader from '../WithLoader';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nconst SearchResultsContainer = (props) => {\r\n  const processingStatus = props.state.processingStatus;\r\n  const isDataEmpty = props.state.data.length === 0;\r\n  const dataProcessed = processingStatus === 'PROCESSED';\r\n\r\n  if(processingStatus==='processingError') {\r\n    return(\r\n      <div className=\"ResultContainer\">\r\n      {\r\n        <div>Something Went Wrong!!! Try again later</div>\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <Scrollbars autoHide={false} autoHeight autoHeightMin=\"300px\" >\r\n    <div className=\"ResultContainer\">\r\n      { isDataEmpty && dataProcessed ?\r\n        \r\n        (\r\n          <div>\r\n            No Results on Github!!! Try Something else\r\n          </div>\r\n        )\r\n      :(props.state.data.map(val => \r\n        <div className=\"Result\">\r\n          <div className=\"ResultTitle\">{val.name || val.login}</div>\r\n          <div className=\"ResultDescription\">{val.description}</div>\r\n        </div>\r\n      ))\r\n      }\r\n  </div> \r\n</Scrollbars>);\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  {\r\n    state:state.searchReducer\r\n  }\r\n)\r\n\r\nexport default compose(connect(mapStateToProps, null),WithLoader)(SearchResultsContainer);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Avatar = (props) => {\r\n  return(\r\n    <div>\r\n      <img src=\"./github-logo.svg\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedOption:state.searchReducer.selectedOption\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(Avatar);","import React from 'react';\r\nimport { Button, Search, Nav, SearchResultsContainer, Avatar } from '../components';\r\nimport { connect } from 'react-redux';\r\nimport './GitSearch.css';\r\n\r\nconst GitSearch = (props) => {\r\n  const AvatarDescription = props.selectedOption === 'Search Repos' ? 'Repos' : 'Organisations'; \r\n\r\n  return(\r\n    <div className=\"GitSearch\">\r\n      <Nav />\r\n      <Avatar />\r\n      <p className=\"AvatarDescription\">Let's search some Github {AvatarDescription}</p>\r\n      <div className=\"SearchContainer\">\r\n        {/* <Select options={options} className=\"CustomizableSelect\" /> */}\r\n        <Search placeHolder=\"Enter a Username...\" className=\"CustomizableSearch\" />\r\n        <Button title=\"Search\" className=\"CustomizableButton\" />\r\n      </div>\r\n      <div className =\"ResultsContainer\">\r\n      <SearchResultsContainer />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedOption:state.searchReducer.selectedOption\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(GitSearch);\r\n","import React from 'react';\r\nimport { setSelectedOption } from '../gitsearch/actions';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport GitSearch from './GitSearch';\r\n\r\nconst OrgnisationSearch = (props) => {\r\n\r\n  props.setSelectedOption('Search Orgnisations')\r\n\r\n  return(\r\n    <>\r\n      <GitSearch />\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n  setSelectedOption\r\n}, dispatch)\r\n\r\nexport default connect(null, mapDispatchToProps)(OrgnisationSearch);","import React from 'react';\r\nimport { setSelectedOption } from './actions';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport GitSearch from './GitSearch';\r\n\r\nconst RepoSearch = (props) => {\r\n  \r\n  props.setSelectedOption('Search Repos')\r\n\r\n  return(\r\n    <>\r\n      <GitSearch />\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n  setSelectedOption\r\n}, dispatch)\r\n\r\nexport default connect(null, mapDispatchToProps)(RepoSearch);","import React from 'react';\r\nimport {\r\n  HashRouter as Router, Switch, Route\r\n} from 'react-router-dom';\r\nimport OrganisationSearch from './gitsearch/OrgnisationSearch'\r\nimport RepoSearch from './gitsearch/RepoSearch'\r\n\r\nconst AppRouter = (props) => {\r\n\r\n  return(\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/SearchOrganisations\" component={OrganisationSearch} />\r\n        <Route path=\"/\" component={RepoSearch} />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\n\r\nexport default AppRouter;","import React from 'react';\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport searchReducer from './gitsearch/reducer';\r\nimport AppRouter from './AppRouter';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst reducers = {\r\n  searchReducer\r\n}\r\n\r\nconst store = createStore(\r\n  combineReducers(reducers),\r\n  initialState,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n)\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store = {store}>\r\n      <AppRouter />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}