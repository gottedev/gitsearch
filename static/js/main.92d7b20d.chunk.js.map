{"version":3,"sources":["gitsearch/reducer.js","gitsearch/api.js","gitsearch/actions.js","components/Search.js","components/nav/Nav.js","components/button/Button.js","components/WithLoader.js","components/searchresultscontainer/SearchResultsContainer.js","components/avatar/Avatar.js","gitsearch/GitSearch.js","gitsearch/OrgnisationSearch.js","gitsearch/RepoSearch.js","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["initialState","processingStatus","searchTerm","selectedOption","data","BASE_URL","getRepos","username","a","url","axios","get","repos","status","Error","getUserData","all","userData","orgs","init","dispatch","type","setSelectedOption","payload","setUserData","then","catch","setRepos","connect","state","searchReducer","bindActionCreators","setSearching","setData","placeholder","className","onChange","e","target","value","Nav","to","searchRepos","searchOrgnaisations","title","data-testid","onClick","WithLoader","Component","height","width","color","compose","isDataEmpty","length","dataProcessed","autoHide","autoHeight","autoHeightMin","map","val","key","description","name","login","Avatar","alt","src","AvatarDescription","selectOption","AppRouter","path","component","OrganisationSearch","exact","RepoSearch","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middleware","thunk","reducers","store","createStore","combineReducers","applyMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92d7b20d.chunk.js","sourcesContent":["\nconst initialState = {\n  processingStatus: 'NOT_PROCESSED',\n  searchTerm: '',\n  selectedOption: 'Search Repos',\n  data: [],\n};\n\nexport default (state = initialState, { payload, type }) => {\n  switch (type) {\n    case 'setSearchTerm':\n      return {\n        ...state,\n        searchTerm: payload,\n      };\n\n    case 'processing':\n      return {\n        ...state,\n        processingStatus: 'PROCESSING',\n      };\n\n    case 'processingError':\n      return {\n        ...state,\n        processingStatus: 'processingError',\n      };\n\n    case 'SetRepos':\n      return {\n        ...state,\n        data: payload,\n        processingStatus: 'PROCESSED',\n      };\n\n    case 'SearchOrganisations':\n      return {\n        ...state,\n        data: payload,\n        processingStatus: 'PROCESSED',\n      };\n    case 'SetSelectedOption':\n      return {\n        ...state,\n        selectedOption: payload,\n        processingStatus: 'NOT_PROCESSED',\n        data: [],\n      };\n    default:\n      return state;\n  }\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.github.com';\n\n\nconst getRepos = async (username) => {\n  const url = `${BASE_URL}/users/${username}/repos?per_page=250`;\n  const repos = await axios.get(url);\n  const { data } = repos;\n  if (repos.status === 404 || repos.status === 403 || repos.status === 500) {\n    throw Error('processingError');\n  }\n  return data;\n};\n\n\nconst getUserData = async (username) => {\n  const userData = await axios\n    .all([\n      axios.get(`${BASE_URL}/users/${username}`),\n      axios.get(`${BASE_URL}/users/${username}/orgs`),\n    ]);\n  if (userData.status === 404 || userData.status === 403 || userData.status === 500) {\n    throw Error('processingError');\n  }\n  const [, { data: orgs }] = userData;\n  return orgs;\n};\n\n\nexport {\n  getRepos,\n  getUserData,\n};\n","import { getRepos, getUserData } from './api';\n\nconst init = (dispatch) => {\n  dispatch({ type: 'processing' });\n};\n\n\nconst setSearchTerm = (searchTerm) => (dispatch) => {\n  dispatch({ type: 'setSearchTerm', payload: searchTerm });\n};\n\nconst setSelectedOption = (selectedOption) => (dispatch) => {\n  dispatch({ type: 'SetSelectedOption', payload: selectedOption });\n};\n\nconst setUserData = (searchTerm) => (dispatch) => {\n  init(dispatch);\n  const onSuccess = (data) => {\n    dispatch({ type: 'SearchOrganisations', payload: data });\n  };\n\n  const onError = () => {\n    dispatch({ type: 'processingError' });\n  };\n\n  getUserData(searchTerm)\n    .then(onSuccess)\n    .catch(onError);\n};\n\nconst setRepos = (searchTerm) => (dispatch) => {\n  init(dispatch);\n  const onSuccess = (data) => {\n    dispatch({ type: 'SetRepos', payload: data });\n  };\n\n  const onError = () => {\n    dispatch({ type: 'processingError' });\n  };\n\n  getRepos(searchTerm)\n    .then(onSuccess)\n    .catch(onError);\n};\n\nexport {\n  setSearchTerm, setUserData, setRepos, setSelectedOption,\n};\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setSearchTerm, setUserData, setRepos } from '../gitsearch/actions';\n\n\nconst Search = ({ placeholder, className, setSearching }) => {\n  const handleChange = (e) => {\n    setSearching(e.target.value);\n  };\n  return (\n    <>\n      <input\n        placeholder={placeholder}\n        type=\"text\"\n        className={className}\n        onChange={handleChange}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  searchTerm: state.searchReducer.searchTerm,\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  setSearching: (payload) => setSearchTerm(payload),\n  setData: (payload) => setUserData(payload),\n  setRepos: (payload) => setRepos(payload),\n}, dispatch);\n\nSearch.propTypes = {\n  className: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  setSearching: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Nav.css';\n\nconst Nav = () => (\n  <div className=\"Navbar\">\n    <Link to=\"/\">RepoSearch</Link>\n    <Link to=\"/SearchOrganisations\">SearchOrganisations</Link>\n  </div>\n);\n\nexport default Nav;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { setUserData, setRepos } from '../../gitsearch/actions';\n\nconst Button = ({\n  className, title, searchOrgnaisations, searchRepos, state: {\n    selectedOption,\n    searchTerm,\n  },\n}) => {\n  const searchGit = () => {\n    if (selectedOption === 'Search Repos') {\n      searchRepos(searchTerm);\n      return;\n    }\n    searchOrgnaisations(searchTerm);\n  };\n  return (\n    <>\n      <button\n        data-testid=\"button\"\n        onClick={searchGit}\n        className={className}\n        type=\"submit\"\n      >\n        {title}\n      </button>\n    </>\n  );\n};\nconst mapStateToProps = (state) => (\n  {\n    state: state.searchReducer,\n  }\n);\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\n  {\n    searchRepos: setRepos,\n    searchOrgnaisations: setUserData,\n  },\n  dispatch,\n);\n\nButton.propTypes = {\n  className: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  searchOrgnaisations: PropTypes.func.isRequired,\n  searchRepos: PropTypes.func.isRequired,\n  state: PropTypes.shape({\n    selectedOption: PropTypes.string.isRequired,\n    searchTerm: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);\n","import React from 'react';\nimport { RingLoader } from 'react-spinners';\nimport PropTypes from 'prop-types';\n\nconst WithLoader = (Component) => ({ state }) => {\n  const { processingStatus } = state;\n  if (processingStatus === 'PROCESSING') {\n    return (\n      <div className=\"ResultContainer\">\n        <RingLoader height=\"250\" width=\"250\" color=\"rgb(99, 159, 170)\" />\n      </div>\n    );\n  }\n  return (\n    <Component state={state} />\n  );\n};\n\nWithLoader.propTypes = {\n  state: PropTypes.shape({\n    processingStatus: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default WithLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './SearchResultsContainer.css';\nimport { compose } from 'recompose';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport PropTypes from 'prop-types';\nimport WithLoader from '../WithLoader';\n\nconst SearchResultsContainer = ({ state: { data, processingStatus } }) => {\n  const isDataEmpty = data.length === 0;\n  const dataProcessed = processingStatus === 'PROCESSED';\n\n  if (processingStatus === 'processingError') {\n    return (\n      <div className=\"ResultContainer\">\n        <div>Something Went Wrong!!! Try again later</div>\n      </div>\n    );\n  }\n  return (\n    <Scrollbars autoHide={false} autoHeight autoHeightMin=\"300px\">\n      <div className=\"ResultContainer\">\n        { isDataEmpty && dataProcessed\n\n          ? (\n            <div>\n            No Results on Github!!! Try Something else\n            </div>\n          )\n          : (data.map((val) => (\n            <div className=\"Result\" key={val.description}>\n              <div className=\"ResultTitle\">{val.name || val.login}</div>\n              <div className=\"ResultDescription\">{val.description}</div>\n            </div>\n          )))}\n      </div>\n    </Scrollbars>\n  );\n};\n\nconst mapStateToProps = (state) => (\n  {\n    state: state.searchReducer,\n  }\n);\n\nSearchResultsContainer.propTypes = {\n  state: PropTypes.shape({\n    processingStatus: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n    }).isRequired).isRequired,\n  }).isRequired,\n};\n\nexport default compose(connect(mapStateToProps, null), WithLoader)(SearchResultsContainer);\n","import React from 'react';\nimport './Avatar.css';\n\nconst Avatar = () => (\n  <div className=\"avatar\">\n    <img alt=\"logo\" src=\"./github-logo.svg\" />\n  </div>\n);\n\n\nexport default Avatar;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Button, Search, Nav, SearchResultsContainer, Avatar,\n} from '../components';\nimport './GitSearch.css';\n\nconst GitSearch = ({ selectedOption }) => {\n  const AvatarDescription = selectedOption === 'Search Repos' ? 'Repos' : 'Organisations';\n\n  return (\n    <div className=\"GitSearch\">\n      <Nav />\n      <Avatar />\n      <p className=\"AvatarDescription\">\n        {`Let's search some Github ${AvatarDescription}`}\n      </p>\n      <div className=\"SearchContainer\">\n        <Search placeholder=\"Enter a Username...\" className=\"CustomizableSearch\" />\n        <Button title=\"Search\" className=\"CustomizableButton\" />\n      </div>\n      <div className=\"ResultsContainer\">\n        <SearchResultsContainer />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  selectedOption: state.searchReducer.selectedOption,\n});\n\nGitSearch.propTypes = {\n  selectedOption: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(GitSearch);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { setSelectedOption } from './actions';\nimport GitSearch from './GitSearch';\n\nconst OrgnisationSearch = ({ selectOption }) => {\n  selectOption('Search Orgnisations');\n\n  return (\n    <>\n      <GitSearch />\n    </>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  selectOption: setSelectedOption,\n}, dispatch);\n\nOrgnisationSearch.propTypes = {\n  selectOption: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(OrgnisationSearch);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { setSelectedOption } from './actions';\nimport GitSearch from './GitSearch';\n\nconst RepoSearch = ({ selectOption }) => {\n  selectOption('Search Repos');\n\n  return (\n    <>\n      <GitSearch />\n    </>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  selectOption: setSelectedOption,\n}, dispatch);\n\nRepoSearch.propTypes = {\n  selectOption: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(RepoSearch);\n","import React from 'react';\nimport {\n  HashRouter as Router, Switch, Route,\n} from 'react-router-dom';\nimport OrganisationSearch from './gitsearch/OrgnisationSearch';\nimport RepoSearch from './gitsearch/RepoSearch';\n\nconst AppRouter = () => (\n  <Router>\n    <Switch>\n      <Route path=\"/SearchOrganisations\" component={OrganisationSearch} />\n      <Route path=\"/\" exact component={RepoSearch} />\n    </Switch>\n  </Router>\n);\n\n\nexport default AppRouter;\n","import React from 'react';\nimport {\n  createStore, applyMiddleware, compose, combineReducers,\n} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport searchReducer from './gitsearch/reducer';\nimport AppRouter from './AppRouter';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst reducers = {\n  searchReducer,\n};\n\nconst store = createStore(\n  combineReducers(reducers),\n  initialState,\n  composeEnhancers(applyMiddleware(...middleware)),\n);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}